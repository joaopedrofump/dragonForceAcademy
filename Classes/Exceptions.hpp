//
//  Exceptions.hpp
//  DragonForceAcademy
//
//  Created by Joao Furriel on 03/11/16.
//  Copyright © 2016 João Furriel Pinheiro. All rights reserved.
//

#ifndef Exceptions_hpp
#define Exceptions_hpp

#include <stdio.h>
#include <string>
using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Values that represent date exception types. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

enum DateExceptionType {
    
    InvalidDay,
    InvalidMonth,
    InvalidYear,
    InvalidSeparators,
    OutOfBoundsMin,
	OutOfBoundsMax
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Values that represent invalid stream types. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

enum InvalidStreamType {
    
    write,
    read
    
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	An invalid date. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class InvalidDate {
private:
    /// <summary>	The day. </summary>
    int day;
    /// <summary>	The month. </summary>
    int month;
    /// <summary>	The year. </summary>
    int year;
    /// <summary>	The exception type. </summary>
    DateExceptionType type;
	string maxDate;
	string minDate;
	/// <summary>	Message describing the exception. </summary>
	string exceptionMessage;
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="type"> 	The date exception type. </param>
	/// <param name="day">  	The day. </param>
	/// <param name="month">	The month. </param>
	/// <param name="year"> 	The year. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	InvalidDate(DateExceptionType type, int day, int month ,int year, string minDate = "", string maxDate = "");

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="exceptionMessage">	Message describing the exception. </param>
	/// <param name="day">			   	The day. </param>
	/// <param name="month">		   	The month. </param>
	/// <param name="year">			   	The year. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	//InvalidDate(string exceptionMessage, int day, int month, int year);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the exception message. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <returns>	The exception message. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    string getMessage();
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	An invalid stream. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class InvalidStream {
private:
    /// <summary>	Filename of the file. </summary>
    string fileName;
    /// <summary>	The type. </summary>
    InvalidStreamType type;
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="fileName">	Filename of the file. </param>
    /// <param name="type">	   	The exception type. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    InvalidStream(string fileName, InvalidStreamType type);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the exception message. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <returns>	The exception message. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    string getMessage();
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	An invalid input. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class InvalidInput {
private:
	/// <summary>	Message describing the exception. </summary>
	string exceptionMessage;
public:


	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="exceptionMessage">	Message describing the exception. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	InvalidInput(string exceptionMessage = "Invalid Input");

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the exception message. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	The exception message. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	string getMessage();
};


#endif /* Exceptions_hpp */
