#pragma once

#include "Club.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A match. </summary>
///
/// <remarks>	Luís, 20/11/2016. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Match{
    /// <summary>	The match's identifier. </summary>
    string id;
	/// <summary>	The match day. </summary>
	Date matchDay;
	/// <summary>	The home team. </summary>
	Club* homeTeam;
	/// <summary>	The away team. </summary>
	Club* awayTeam;
    /// <summary>	The home team score. </summary>
    unsigned int homeTeamScore;
    /// <summary>	The away team score. </summary>
    unsigned int awayTeamScore;
    /// <summary>	The map information players. </summary>
    map<unsigned int, Info*> mapInfoPlayers;
    /// <summary>	True if played. </summary>
    bool played;
	
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="id">	The identifier. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    Match(string id);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="matchDay">	The match day. </param>
	/// <param name="homeTeam">	[in,out] If non-null, the home team. </param>
	/// <param name="awayTeam">	[in,out] If non-null, the away team. </param>
	/// <param name="id">	   	The match's identifier. </param>
	/// <param name="played">  	(Optional) True if played. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Match(Date matchDay, Club* homeTeam, Club* awayTeam, string id, bool played = false);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor that creates a new match by reading from the season file using a stringstream. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="iss">	[in,out] The stringstream. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    Match(istringstream& iss);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor that creates a new match by reading from the season file using a stringstream, checking either if the club used is the program club and if it is playing away or home. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="iss">		  	[in,out] The stringstream. </param>
    /// <param name="programClub">	[in,out] If non-null, the program club. </param>
    /// <param name="homeOrAway"> 	The home or away. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    Match(istringstream& iss, Club* programClub, MatchType homeOrAway);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="matchDay">	The match day. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    Match(Date matchDay);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~Match();

	// GETTERS

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets match day. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	The match day. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Date getMatchDay() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets home team. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	Null if it fails, else the home team. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Club* getHomeTeam() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets away team. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	Null if it fails, else the away team. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Club* getAwayTeam() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the score. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	The score. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	pair<unsigned int, unsigned int> getScore() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the players. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	Null if it fails, else the players. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<Worker*> getPlayers() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets players identifiers. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	The players identifiers. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<unsigned int> getPlayersIds() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets information players. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <returns>	Null if it fails, else the information players. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    map<unsigned int, Info*> getInfoPlayers() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds an information player. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="newPlayer">	[in,out] If non-null, the new player. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void addInfoPlayer(pair<unsigned int, Info*> newPlayer);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the match's identifier. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <returns>	The match's identifier. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    string getId() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the played matches. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool getPlayed() const;

	// SETTERS

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets match day. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="newDay">	The new day. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void setMatchDay(Date newDay);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets home team. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="newHomeTeam">	[in,out] If non-null, the new home team. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void setHomeTeam(Club* newHomeTeam);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets away team. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="newAwayTeam">	[in,out] If non-null, the new away team. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void setAwayTeam(Club* newAwayTeam);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets home team score. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="newHomeTeamScore">	The new home team score. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void setHomeTeamScore(unsigned int newHomeTeamScore);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets away team score. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="newAwayTeamScore">	The new away team score. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void setAwayTeamScore(unsigned int newAwayTeamScore);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the match's identifier. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="newId">	Identifier for the new. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void setId(string newId);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the match players. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="playersIds">	List of identifiers for the  match players. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void setPlayers(vector<unsigned int> playersIds);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Registers the match. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="homeTeamScore">	The home team score. </param>
    /// <param name="awayTeamScore">	The away team score. </param>
    /// <param name="infoPlayers">  	[in,out] If non-null, the information players. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void registerMatch(unsigned int homeTeamScore, unsigned int awayTeamScore, map<unsigned int, Info*> infoPlayers);
    
    //IO

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Stream insertion operator. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="out">  	[in,out] The outfile. </param>
    /// <param name="match">	[in,out] Specifies the match. </param>
    ///
    /// <returns>	The shifted result. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    friend ostream& operator<<(ostream& out, Match &match);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Shows match info on the screen. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="tmpID">	Identifier for the temporary. </param>
	///
	/// <returns>	A vector&lt;string&gt; </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<string> showInScreen(unsigned int tmpID) const;

	//COMPARES

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Less-than comparison operator that compares the day of both matches. </summary>
	///
	/// <remarks>	Luís, 20/11/2016. </remarks>
	///
	/// <param name="match1">	The first match . </param>
	/// <param name="match2">	The second match. </param>
	///
	/// <returns>	True if the first match's day is less than the second's. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	friend bool operator<(const Match& match1, const Match& match2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Equality operator that compares two different matches in the smae day. </summary>
    ///
    /// <remarks>	Luís, 20/11/2016. </remarks>
    ///
    /// <param name="compareMatch">	A match specifying the compare. </param>
    ///
    /// <returns>	True if the parameters are considered equivalent. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    bool operator==(const Match &compareMatch) const;

};



